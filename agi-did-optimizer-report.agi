#!/usr/bin/perl

##############################################################################
# VICIdial DID Optimizer - Call Result Reporting AGI
#
# This AGI script reports call results back to the DID Optimizer API
# for AI training and analytics purposes.
#
# Usage: AGI(agi-did-optimizer-report.agi,CAMPAIGN_ID,CUSTOMER_PHONE,RESULT,DURATION,DISPOSITION)
#
# Called from the 'h' extension (hangup handler) in the dialplan
##############################################################################

use strict;
use warnings;
use LWP::UserAgent;
use JSON;

# AGI Environment variables
my %agi_env;
while (my $line = <STDIN>) {
    chomp $line;
    last if $line eq '';
    if ($line =~ /^agi_(\w+):\s*(.*)$/) {
        $agi_env{$1} = $2;
    }
}

# Get command line arguments
my ($campaign_id, $customer_phone, $call_result, $call_duration, $disposition) = @ARGV;

# Read configuration
my $config_file = '/etc/asterisk/dids.conf';
my %config = read_config($config_file);

# Log function
sub log_message {
    my $message = shift;
    my $log_file = $config{'log_file'} || '/var/log/astguiclient/did_optimizer.log';

    open my $fh, '>>', $log_file or return;
    my $timestamp = localtime();
    print $fh "[$timestamp] [REPORT-AGI] $message\n";
    close $fh;
}

# Configuration reader
sub read_config {
    my $file = shift;
    my %cfg;

    open my $fh, '<', $file or do {
        log_message("ERROR: Cannot read config file: $file");
        return %cfg;
    };

    while (my $line = <$fh>) {
        chomp $line;
        next if $line =~ /^\s*[#;]/ || $line =~ /^\s*$/;
        next if $line =~ /^\s*\[/;

        if ($line =~ /^\s*(\w+)\s*=\s*(.*)$/) {
            $cfg{$1} = $2;
        }
    }
    close $fh;
    return %cfg;
}

# Report call results to DID Optimizer API
sub report_call_result {
    my ($campaign, $phone, $result, $duration, $disp) = @_;

    my $api_url = $config{api_base_url} || 'http://localhost:3001';
    my $api_key = $config{api_key} || '';

    unless ($api_key) {
        log_message("ERROR: API key not configured for reporting");
        return;
    }

    my $ua = LWP::UserAgent->new(
        timeout => $config{api_timeout} || 10,
        agent => 'VICIdial-DID-Optimizer-Report-AGI/1.0'
    );

    my $url = "$api_url/api/v1/calls/report";

    # Prepare call result data
    my $call_data = {
        campaign_id => $campaign,
        customer_phone => $phone,
        call_result => $result || 'UNKNOWN',
        call_duration => $duration || 0,
        disposition => $disp || 'UNKNOWN',
        timestamp => time(),
        source => 'vicidial-agi'
    };

    # Add additional context from AGI environment
    $call_data->{uniqueid} = $agi_env{uniqueid} if $agi_env{uniqueid};
    $call_data->{channel} = $agi_env{channel} if $agi_env{channel};
    $call_data->{callerid} = $agi_env{callerid} if $agi_env{callerid};

    my $json_data = encode_json($call_data);

    my $request = HTTP::Request->new(POST => $url);
    $request->header('x-api-key' => $api_key);
    $request->header('Content-Type' => 'application/json');
    $request->content($json_data);

    log_message("Reporting call result: $phone -> $result ($duration seconds, disposition: $disp)");

    my $response = $ua->request($request);

    if ($response->is_success) {
        log_message("SUCCESS: Call result reported successfully");
        return 1;
    } else {
        log_message("ERROR: Failed to report call result: " . $response->status_line);
        return 0;
    }
}

# AGI Response functions
sub agi_verbose {
    my ($message, $level) = @_;
    $level ||= 1;
    print "VERBOSE \"$message\" $level\n";
}

# Main execution
eval {
    log_message("DID Optimizer Report AGI started: campaign=$campaign_id, phone=$customer_phone, result=$call_result");

    # Input validation
    unless ($campaign_id && $customer_phone) {
        log_message("WARNING: Missing campaign_id or customer_phone, skipping report");
        agi_verbose("DID Optimizer Report: Skipping due to missing parameters");
        exit 0;
    }

    # Report the call result
    my $success = report_call_result($campaign_id, $customer_phone, $call_result, $call_duration, $disposition);

    if ($success) {
        agi_verbose("DID Optimizer Report: Call result reported successfully");
    } else {
        agi_verbose("DID Optimizer Report: Failed to report call result");
    }

    log_message("DID Optimizer Report AGI completed");
};

if ($@) {
    log_message("ERROR: Report AGI script failed: $@");
    agi_verbose("DID Optimizer Report: Error occurred during reporting");
}

exit 0;